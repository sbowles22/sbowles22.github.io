<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://sbowles22.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sbowles22.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-24T21:31:00+00:00</updated><id>https://sbowles22.github.io/feed.xml</id><title type="html">Spencer Bowles</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">It’s Alive!</title><link href="https://sbowles22.github.io/blog/2024/05/24/its-alive/" rel="alternate" type="text/html" title="It’s Alive!"/><published>2024-05-24T14:03:00+00:00</published><updated>2024-05-24T14:03:00+00:00</updated><id>https://sbowles22.github.io/blog/2024/05/24/its-alive</id><content type="html" xml:base="https://sbowles22.github.io/blog/2024/05/24/its-alive/"><![CDATA[<h4 id="kraymer-moyal">Kraymer-Moyal</h4> <p>Today, after some quick cleanup of yesterday’s <code class="language-plaintext highlighter-rouge">Network</code> troubles, I got to work on implementing the various algorithms necessary for the OPO simulation. This first started with the <code class="language-plaintext highlighter-rouge">Network::kraymer_moyal</code> method, a process to find the current gradient of the in-phase and quadrature-phase components of DOPO pulses. This task was very easy, since it only involved copying my old C code and changing some syntax and variable names. This worked first try!</p> <h4 id="euler-maruyama">Euler-Maruyama</h4> <p>Secondly, I had to use the gradients and a C++ normal distrobution generator to numerically integrate across the gradient. This was done from memory since I had written this function a few times before. I did need to figure out how RNG worked in C++, but this was exeedingly easy and allowed me to add a universal RNG for the entire <code class="language-plaintext highlighter-rouge">Network</code> class, so any random number generation within works via the same seed. This did not work first try, since I had forgotten to include the pdates for the quadrature phase.</p> <h4 id="cimmi-works"><code class="language-plaintext highlighter-rouge">cimmi</code> Works!</h4> <p>Afterwards, all I had to do was manuever the two functions into the <code class="language-plaintext highlighter-rouge">Network::run</code> method, and everything was good to go! This process was exeedingly easy after the preperation, and there were no issues with SWIG since none of this code passes the interface.</p> <h4 id="features-to-do">Features to do:</h4> <p>Still, while we have the DOPO network equations simulating, we are far from a useable library. The main features that need to be added before include:</p> <ul> <li>A <code class="language-plaintext highlighter-rouge">Simulator</code> class to perform network control and readout</li> <li>A proper <code class="language-plaintext highlighter-rouge">Simulator</code> class interface to allow us to hide the <code class="language-plaintext highlighter-rouge">Network</code> and <code class="language-plaintext highlighter-rouge">Graph</code> classes from Python exposure <ul> <li>This includes documentation of the interface</li> </ul> </li> <li>Proper Logging</li> <li>Error handling for all functions that could be used improperly <ul> <li>This includes state tracking for <code class="language-plaintext highlighter-rouge">Network</code> class setup (since there is a particular order that if not followed can cause segfaults)</li> </ul> </li> <li>GPU acceleration of <code class="language-plaintext highlighter-rouge">Network::kraymer_moyal</code></li> <li>Reworking build process into <code class="language-plaintext highlighter-rouge">setuptools</code> library</li> <li>Automatic evaluation of max cut solutions</li> <li>Additional solvers (Sahini-Gonzales, Simulated Annealling)</li> <li>Internal random graph generation</li> </ul>]]></content><author><name></name></author><category term="surf"/><category term="cimmi"/><summary type="html"><![CDATA[CIMMI is in a working state]]></summary></entry><entry><title type="html">Nancy Drew 2, Take a SWIG of this Interface</title><link href="https://sbowles22.github.io/blog/2024/05/23/swig-interfacing/" rel="alternate" type="text/html" title="Nancy Drew 2, Take a SWIG of this Interface"/><published>2024-05-23T15:42:00+00:00</published><updated>2024-05-23T15:42:00+00:00</updated><id>https://sbowles22.github.io/blog/2024/05/23/swig-interfacing</id><content type="html" xml:base="https://sbowles22.github.io/blog/2024/05/23/swig-interfacing/"><![CDATA[<h4 id="swig-enum-troubles">SWIG <code class="language-plaintext highlighter-rouge">enum</code> Troubles</h4> <p>Today, I worked on making sure that the max cut problem type could be selected and would show up in the network’s couplings. This involved figuring out how SWIG wrapped <code class="language-plaintext highlighter-rouge">enum</code>’s, which I realized was just to set it as a constant and give it a name like [type]_[name]. This led me to learning about the <code class="language-plaintext highlighter-rouge">enum class</code>, which I promptly converted my <code class="language-plaintext highlighter-rouge">typdef enum</code>’s into.</p> <h4 id="team-meeting">Team Meeting</h4> <p>Today, we met to figure out the progress on the code as well as who was responsible for what parts of the code. The major takeaways were that the <code class="language-plaintext highlighter-rouge">Network</code> class is just about finished, I am going to focus on expanding the core functionalities of the code, and Vidisha is going to work on expanding the code’s feature set.</p> <h4 id="swig-pointer-troubles">SWIG Pointer Troubles</h4> <p>My major issue of the day was to figure out why I was not able to pass an instance of the <code class="language-plaintext highlighter-rouge">Graph</code> class into the <code class="language-plaintext highlighter-rouge">Network::set_source</code> function while in Python. I initially believed that this was something weird with the SWIG interface and pointers, so I tried all measure of converting everything into pointers, but my problem persisted. I then took the time to split up the <code class="language-plaintext highlighter-rouge">Network::set_source</code> function into both it and a <code class="language-plaintext highlighter-rouge">Network::configure</code> function, so no implementation details were left ambiguous. This still did not fix my issue.</p> <h4 id="nevermind-you-cant-dereference-a-null-pointer">Nevermind, you cant dereference a null pointer</h4> <p>Eventually, I realized that this was an issue of not calling the proper constructor to set my arrays to a vallid, malloc’ed pointer. Then I realized that you could not call a constructor from inside a class (for good reasons,) so I decided to refactor my code a little more. I removed the sizing component of the <code class="language-plaintext highlighter-rouge">Network::Network(int)</code> constructor into a method <code class="language-plaintext highlighter-rouge">Network::resize(int)</code> that is called upon construction with a pre-defined size. This allowed me to then use this method in my configuration method, saving on repeat code and ensuring that all arrays are malloc’ed before being accessed.</p> <p><em>Edit: After waking up, no, I don’t know why that title is supposed to be funny either.</em></p>]]></content><author><name></name></author><category term="surf"/><category term="bug"/><category term="team-meeting"/><category term="cimmi"/><summary type="html"><![CDATA[I'm real funny for that title, right?]]></summary></entry><entry><title type="html">Nancy Drew 1, Secret of the Lost Matrix</title><link href="https://sbowles22.github.io/blog/2024/05/22/bug-hunting/" rel="alternate" type="text/html" title="Nancy Drew 1, Secret of the Lost Matrix"/><published>2024-05-22T17:48:00+00:00</published><updated>2024-05-22T17:48:00+00:00</updated><id>https://sbowles22.github.io/blog/2024/05/22/bug-hunting</id><content type="html" xml:base="https://sbowles22.github.io/blog/2024/05/22/bug-hunting/"><![CDATA[<h4 id="ga-meeting">GA Meeting</h4> <p>Today, I met with Vitor, my SURF Graduate Assistant (GA), so he could get an idea of any questions I had for the program. He reccomended that I show up for tomorrow’s social event at 4 pm. Otherwise, he reminded me to get started working on my abstract that is apparently due next week? He also mentioned the format of the mini-conference next week. There are going to be 3 sets of talks, each with 3 choices. One that stood out was about the differences between the scientific and engineering methods.</p> <h4 id="network-class"><code class="language-plaintext highlighter-rouge">Network</code> Class</h4> <p>Today, I got started on work for the <code class="language-plaintext highlighter-rouge">Network</code> class. The purpose of this class is to configure a graph for evolution as a DOPO network. At first, everything was going smoothly until I tried to build my code. Aside for a few minor issues (syntax errors and whatnot,) nothing seemed off; I mean I had writted this once before in C. To my chegrin, once I fixed this error, I recieved an error that the Python build could not find the matrix class when importing in Python.</p> <h4 id="wheres-my-matrix">Where’s my <code class="language-plaintext highlighter-rouge">Matrix</code>?</h4> <p>I first checked the SWIG wrapper file to see if the <code class="language-plaintext highlighter-rouge">Matrix</code> class appeared anywhere in there. It did not. This happened at 11:30. I then spent an hour messing with build configuration and syntax, but nothing seemed to work. I decided to take my lunch break since it was already 30 mins into when I normally would and come back to this after I got some good thinking done.</p> <p>Afterwards, I tried several things, looked up all I could about the error, even banged my head into the wall a couple times, but I could just not find anything to clear up what was happening. Eventually, I realized that this was likely an aerror with the fact that <code class="language-plaintext highlighter-rouge">Matrix</code> is a template class. What weirded me out is that <code class="language-plaintext highlighter-rouge">Matrix</code> worked when used with the class in its file (templated as a <code class="language-plaintext highlighter-rouge">short</code>) but not with a class in a different file (templated as a <code class="language-plaintext highlighter-rouge">float</code>).<d-footnote>c++ veterans might know what up at this point. But hey, cut me some slack I'm new to this.</d-footnote> In response, I moved the class definition into its own file <code class="language-plaintext highlighter-rouge">utils.cpp</code> and its header into <code class="language-plaintext highlighter-rouge">utils.hpp</code>. <strong>This did not fix my issues but would prove a crucial step in the right direction in hindsight</strong>. Still though, the same error persisted.</p> <p>I now decided that I should verify that the code worked when compiling using a straight c++ compiler. Notably, it did not. Instead I was granted with a cocophony of “undefined reference to cimmi::utils::Matrix…” from both the <code class="language-plaintext highlighter-rouge">Graph</code> and <code class="language-plaintext highlighter-rouge">Network</code> classes. After trying a plethora of combinations for compiler arguments, I decided that I should keep trekking on through stack overflow. Eventually, I was able to fine <a href="https://stackoverflow.com/questions/8752837/undefined-reference-to-template-class-constructor">one post</a> that knew what was going on. Man I love stack overflow.</p> <p><em>Lesson learned: class templates belong in header files.</em></p> <p>Also it’s 6:15, and I need to make a conference presentation and dinner, so I will stop at a win.</p>]]></content><author><name></name></author><category term="surf"/><category term="bug"/><category term="cimmi"/><category term="ga-meeting"/><summary type="html"><![CDATA[today we are hunting for an elusive bug]]></summary></entry><entry><title type="html">Build fixes</title><link href="https://sbowles22.github.io/blog/2024/05/22/build-fix/" rel="alternate" type="text/html" title="Build fixes"/><published>2024-05-22T14:17:00+00:00</published><updated>2024-05-22T14:17:00+00:00</updated><id>https://sbowles22.github.io/blog/2024/05/22/build-fix</id><content type="html" xml:base="https://sbowles22.github.io/blog/2024/05/22/build-fix/"><![CDATA[<h4 id="build-bugs">Build Bugs</h4> <p>Today, I started by investigating a build bug that has been plauging me for the past month or so.<d-footnote>Spoilers: it was something stupid :(</d-footnote> I had initially seen this bug after I tried to build and use a new <code class="language-plaintext highlighter-rouge">Graph</code> class that was capable of importing graphs from the Rudy graph generator that I decided to use near the end of the semester. This choice was to keep the testing of the simulator similar to other simulators in the literature. The bug showed itself as missing class methods withing the wrapped source files but only when running a script referencing those methods.</p> <p>The idea I had thought of but had not employed was that the bug originated from a misinclusion of the source files during the disutils build.<d-footnote> I have now also learned that disultils is being depricated, so I'll have to move to setuptools in the near future.</d-footnote> It turns out that this was the case, but the problem remained after I pointed disutils at the full list of source files. It took me longer than I care to admit to realize that the python <code class="language-plaintext highlighter-rouge">os</code> package did not work how I thought it might. After fixing this, it started building and importing properly, but then I saw the actual list of errors that my code had in it. Shorly after some SWIG confusion<d-footnote>Notably, `std::string` will not pass throught the SWIG interface naturally, so one must use `char*`. Also, `print` is not a valid method name, probably since it is a builtin function.</d-footnote> things started working and my graphs were importing!</p> <h4 id="group-meeting">Group Meeting</h4> <p>In today’s group meeting, we had Vidisha give a talk on a 2018 paper analyzing dynamics of CIMs with regards to lattice networks. Primarily, the paper showed a phenomenon of these networks where the CIMs entered a “freeze-out” state where spins would no longer flip. This seems to be a primary challenge of OPOs and pump scheduling. The paper had pointed out that large amounts of optical noise would be able to reduce this freeze-out. We should take a look and see if we could replicate their findings using our own simulator. The paper showed that things agreed with their simulator. Additionally, they were managing to get over 90% accuracy with N=44^2 networks, so we should see if we are able to reach that level of accuracy.</p> <h4 id="network-class"><code class="language-plaintext highlighter-rouge">Network</code> Class</h4> <p>Finally, I have gotten to work on fleshing out a <code class="language-plaintext highlighter-rouge">Network</code> class capable of housing graph couplings and dricing the network. So far, I have been identifying functions that I need to make and their relationships. Additionally, I am integrating the ability to use a pump shedule instead of a flat pump rate for <code class="language-plaintext highlighter-rouge">cimmi</code>, unlike my previous code.</p>]]></content><author><name></name></author><category term="surf"/><category term="build"/><category term="bug"/><category term="group-meeting"/><category term="cimmi"/><summary type="html"><![CDATA[Fixing month-long build issues and a group meeting.]]></summary></entry><entry><title type="html">SURF First Day</title><link href="https://sbowles22.github.io/blog/2024/05/20/surf-first-day/" rel="alternate" type="text/html" title="SURF First Day"/><published>2024-05-20T17:00:00+00:00</published><updated>2024-05-20T17:00:00+00:00</updated><id>https://sbowles22.github.io/blog/2024/05/20/surf-first-day</id><content type="html" xml:base="https://sbowles22.github.io/blog/2024/05/20/surf-first-day/"><![CDATA[<p>Today we had our orientation for the SURF program. As such, I didn’t get much of anything done. In leiu of this, I have taken the liberty to create a simple website to help journal the goings on of my project!</p> <p>Anyways hi, I’m Spencer Bowles, currently a computer engineering student at Purdue University, and I’m spending the bulk of this summer focusing on a niche method of computing called the coherent Ising machine (CIM). For this project, I am working on a simulator called the CIM Modeling Interface (CIMMI). For those interested, the <code class="language-plaintext highlighter-rouge">cimmi</code> repository can be found <a href="https://github.com/sbowles22/cimmi">here</a>.</p> <h4 id="plans">Plans</h4> <p>I will say more about my project in the days to come, but for now I will outline some preliminary goals for this summer. For some context, I have been working on this project in a smaller (part-time) capacity for the past year-and-a-half, so the opportunity to focus for the summer should allow me to get significantly more done.</p> <p>The major items I hope to accomplish this summer are:</p> <ul> <li>Get <code class="language-plaintext highlighter-rouge">cimmi</code> into a working state</li> <li>Use <code class="language-plaintext highlighter-rouge">cimmi</code> to conduct tests on CIM noise</li> <li>Write my results into a report</li> </ul> <p>When it comes to SURF, there are a few assignments that I have to get done. These include:</p> <ul> <li>Literature Review (Due 6/7)</li> <li>Project Abstract (Draft 6/14, Due 7/5)</li> <li>Symposium (Draft 7/15)</li> <li>Paper (Draft 7/5, Due 7/22)</li> </ul> <p>There are also a few mini-conferences that I must attend. These are on 5/28, 6/18, 7/9; there is also a symposium 7/25.</p> <p>Well, I’ll stop procrastinating and get back to work! Have a good one!</p>]]></content><author><name></name></author><category term="surf"/><category term="surf"/><summary type="html"><![CDATA[first day, looking forward to summer]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://sbowles22.github.io/blog/2022/04/23/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://sbowles22.github.io/blog/2022/04/23/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://sbowles22.github.io/blog/2022/04/23/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>